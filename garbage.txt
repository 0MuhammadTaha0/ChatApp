{% extends "layout.html" %}

{% block title %}
    Dashboard
{% endblock %}

{% block main %}

{% endblock %}

+ ".png"
 , {type: "image/png"}

SELECT users.username as sender, b.username as receiver, message, timestamp, File.fid, File.name, File.mimetype FROM messages
JOIN users ON users.id = messages.sender
JOIN users b ON b.id = messages.receiver
FULL OUTER JOIN File ON File.fid = messages.fid
WHERE
(messages.sender = 3 and messages.receiver = 6)
OR
(messages.sender = 6 and messages.receiver = 3)
ORDER BY messages.mid ASC;


SELECT users.username as sender, b.username as receiver, message, timestamp FROM messages
JOIN users ON users.id = messages.sender
JOIN users b ON b.id = messages.receiver
WHERE
(messages.sender = 3 and messages.receiver = 4)
OR
(messages.sender = 4 and messages.receiver = 3)
ORDER BY messages.mid ASC;

// function fileClickListener(fid, name, mimetype) {
//     let id = fid;
//     fetch(`/fetchFile?fid=${id}`)
//     .then(response => response.blob()
//     .then(data => {
//         let filename = name
//         let filemimetype = mimetype
//         const myFile = new File([data], filename, {type: filemimetype});
        
//         var url = URL.createObjectURL(myFile);
//         const link = document.createElement('a')

//         link.href = url
//         link.download = name
//         document.body.appendChild(link)
//         link.click()
        
//         document.body.removeChild(link)
//         window.URL.revokeObjectURL(url)
//     }));
// }

// if ('messages' in contacts[i]) {
// }
// else {
//     contacts[i].push({
//         key:   "messages",
//         value: [message]
//     });
// }

    // let message = {
    //     message: input.value.trim(),
    //     receiver: activeContact.id,
    //     timestamp: new Date().toISOString().replace("T"," ").substring(0, 19)
    // }
    // if (message['message']) {
    //     const chatMessages = document.querySelector('.chat-messages');
    //     const newMessage = document.createElement('div');
    //     newMessage.classList.add('message');
    //     newMessage.textContent = message['message'];
    //     chatMessages.appendChild(newMessage);
    //     input.value = '';
    //     chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to the bottom
    //     appendMessage(message, message["receiver"]);

    //     // Sending message to the server
    //     socket.emit("send_message", message)

    // }


# @socketio.on("send_message")
# def on_send_message(message):
#     message["sender"] = session["user_id"]
#     if int(message["receiver"]) in users:
#         socketio.emit("send_message", message, room=users[int(message["receiver"])])
#     db.execute("INSERT INTO messages (sender, receiver, message, timestamp) VALUES (?, ?, ?, ?)", session["user_id"], message["receiver"], message["message"], message["timestamp"])